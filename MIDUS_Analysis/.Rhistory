my_data_sum$Diag_HBP <- my_data_indiv$Diag_HBP
my_data_sum$Race <- my_data_indiv$Race
Z <- my_data_indiv |>
select(Simcox_ID, Race, Diag_HBP,
grep("20:4", names(my_data_indiv)
)
)
View(Z)
Z1 <- my_data_sum |>
select(Simcox_ID,
grep("20:4", names(my_data_sum)
)
)
Z2 <- left_join(Z1, Z2, by = 'Simcox_ID)
Z2 <- left_join(Z1, Z2, by = 'Simcox_ID')
Z2 <- left_join(Z, Z1, by = 'Simcox_ID')
View(Z2)
data to long form
?pivot_longer
View(Z2)
mdat <- Z2 |> pivot_longer(!c(Simcox_ID, Race, Diag_HBP),
names_to = "Lipid",
values_to = "value")
View(mdat)
# Subset columns of interest from individual lipid data frame
Z <- my_data_indiv |>
select(Simcox_ID, Race, Diag_HBP,
grep("20:4", names(my_data_indiv)    # pull all columns with 20:4 in column name
)
)
# Subset columns of interest from sum lipid data frame
Z1 <- my_data_sum |>
select(Simcox_ID,
grep("20:4", names(my_data_sum)
)
)
# Merge subsetted columns
Z2 <- left_join(Z, Z1, by = 'Simcox_ID')
# Edit lipid nomenclature to match SHOW naming
names(Z2) <- gsub("/", "_",names(Z2))
names(Z2) <- gsub("PE O-", "EtherPE ",names(Z2))
names(Z2) <- gsub("PE P-", "EtherPE ",names(Z2))
names(Z2) <- gsub("-", "_",names(Z2))
# Replace NA with 0
Z2[is.na(Z2)] <- 0
# Change data to long form
mdat <- Z2 |> pivot_longer(!c(Simcox_ID, Race, Diag_HBP),
names_to = "Lipid",
values_to = "value")
View(mdat)
# Split lipid name by acyl chain
mdat_FA <- str_split_fixed(mdat$Lipid, "_", 2)
# Split lipid name by acyl chain
mdat_FA <- str_split_fixed(mdat$Lipid, "_", 2)
mdat2 <- cbind(mdat, mdat_FA)
mdat |> str_split_fixed(mdat$Lipid, "_", 2)
mdat |> str_split_fixed(Lipid, "_", 2)
mdat2_FA1 <- mdat3[,1:6]
mdat_FA <- str_split_fixed(mdat$Lipid, "_", 2)
mdat2 <- cbind(mdat, mdat_FA)
mdat2_FA1 <- mdat2[,1:6]
mdat2_FA2 <- mdat2[,c(1:5,7)]
names(mdat2_FA1)[6] <- "FA"
names(mdat2_FA2)[6] <- "FA"
mdat2_FA1$FA <- gsub(".* ", "", mdat2_FA1$FA)
# This is your dataset to use
mdat3 <- rbind(mdat2_FA1, mdat2_FA2)
View(mdat3)
# Filter out the signal of all non-arachidonic acid acyl chains
mdat4 <- mdat3[mdat3$FA == '20:4',]
mdat4$Lipid <- gsub(" .*", "", mdat4$Lipid)
View(mdat4)
?summarise
mdat4 <- mdat4 |>
group_by(Simcox_ID, Lipid) |>
summarise(value = sum(value))
View(mdat4)
mdat4 <- mdat4 |>
group_by(Lipid) |>
summarise(value = mean(value)) |>
ungroup
mdat4 <- mdat4 |>
group_by(Lipid) |>
summarise(value = mean(value)) |>
ungroup()
mdat4$percent <- round(100*mdat4$value/sum(mdat4$value), 2)
# Edit pie chart label
mdat4$label <- paste0(mdat4$Lipid, " (",
mdat4$percent,
"%)")
pie_pal <- c("#E41A1C", "black", "#4DAF4A", "#984EA3", "#91D1C2B2", # CE DAG EtherPE FA LPC
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999") # LPE PC PE PI TG
pie(mdat4$value, labels = mdat4$label,
col = pie_pal,
main = "MIDUS 20:4 Intensity",
border="black")
CairoPDF(file = "output/Fake_MIDUS_ARA_intensity_pie.pdf",
height=8, width = 8)
# create pie chart to plot proportion of each subclass contributing to total 20:4 signal
pie(mdat4$value,          # variable to calculate proportions
labels = mdat4$label, # label of each slice
col = pie_pal,        # color palette to use
main = "MIDUS 20:4 intensity across lipids",  # plot title
border="black")       # plot outline
dev.off()
View(my_data_sum)
Y <- my_data_sum |>
select(Simcox_ID, `TAG 42:0-16:0`:`TAG 60:11-22:6`)
View(my_data_indiv)
Z <- my_data_indiv |>
select(Simcox_ID, `Systolic BP`, Race, Age, WC,
`CRP (ug/mL)`, `HDL (mg/dL)`, `Total Chol (mg/dL)`,
HbA1c, `CE 12:0`:`TAG 60:11`)
Z <- my_data_indiv |>
select(Simcox_ID, `Systolic BP`, Race, Age, `WC (cm)`,
`CRP (ug/mL)`, `HDL (mg/dL)`, `Total Chol (mg/dL)`,
HbA1c, `CE 12:0`:`TAG 60:11`)
Z <- left_join(Z, Y, by = "Simcox_ID")
View(Z)
# Remove 'Simcox_ID' variable
Z <- Z |> select(!Simcox_ID)
View(Z)
View(Z)
# Subset TAGs containing identified acyl chains from sum lipid data frame
Y <- my_data_sum |>
select(Simcox_ID, `TAG 42:0-16:0`:`TAG 60:11-22:6`)
# Subset key variables for regressions from individual lipid data frame
Z <- my_data_indiv |>
select(Simcox_ID, `Systolic BP`, Race, Age, `WC (cm)`,
`CRP (ug/mL)`, `HDL (mg/dL)`, `Total Chol (mg/dL)`,
HbA1c, `CE 12:0`:`TAG 60:11`)
# Combine individual and sum lipid data frames by 'Simcox_ID'
Z <- left_join(Z, Y, by = "Simcox_ID")
# Remove 'Simcox_ID' variable
Z <- Z |> select(!Simcox_ID)
y_var <- Z$`Systolic BP`
race_var <- Z$Race
Age_var <- scale(log2(Z$Age), center = TRUE, scale = TRUE)
WC_var <- scale(log2(Z$`WC (cm)`), center = TRUE, scale = TRUE)
CRP_var <- scale(log2(Z$`CRP (ug/mL)`), center = TRUE, scale = TRUE)
Hb_var <- scale(log2(Z$HbA1c), center = TRUE, scale = TRUE)
HDL_var <- scale(log2(Z$`HDL (mg/dL)`), center = TRUE, scale = TRUE)
Chol_var <- scale(log2(Z$`Total Chol (mg/dL)`), center = TRUE, scale = TRUE)
lipid <- as.character()
beta_y_int <- as.numeric()
beta_AfAm <- as.numeric()
beta_Age <- as.numeric()
beta_WC <- as.numeric()
beta_CRP <- as.numeric()
beta_Hb <- as.numeric()
beta_HDL <- as.numeric()
beta_Chol <- as.numeric()
beta_lipid <- as.numeric()
p_y_int <- as.numeric()
p_AfAm <- as.numeric()
p_Age <- as.numeric()
p_WC <- as.numeric()
p_CRP <- as.numeric()
p_Hb <- as.numeric()
p_HDL <- as.numeric()
p_Chol <- as.numeric()
p_lipid <- as.numeric()
adj_r_sq <- as.numeric()
for (i in 9:ncol(Z)) {
x_var <- scale(log2(Z[,i]), center = TRUE, scale = TRUE)
my_lm <- lm(y_var ~ race_var + Age_var + WC_var + CRP_var + Hb_var + HDL_var + Chol_var + x_var)
lipid[i] <- names(Z)[i]
beta_y_int[i] <- summary(my_lm)$coefficients[1,1]
beta_AfAm[i] <- summary(my_lm)$coefficients[2,1]
beta_Age[i] <- summary(my_lm)$coefficients[3,1]
beta_WC[i] <- summary(my_lm)$coefficients[4,1]
beta_CRP[i] <- summary(my_lm)$coefficients[5,1]
beta_Hb[i] <- summary(my_lm)$coefficients[6,1]
beta_HDL[i] <- summary(my_lm)$coefficients[7,1]
beta_Chol[i] <- summary(my_lm)$coefficients[8,1]
beta_lipid[i] <- summary(my_lm)$coefficients[9,1]
p_y_int[i] <- summary(my_lm)$coefficients[1,4]
p_AfAm[i] <- summary(my_lm)$coefficients[2,4]
p_Age[i] <- summary(my_lm)$coefficients[3,4]
p_WC[i] <- summary(my_lm)$coefficients[4,4]
p_CRP[i] <- summary(my_lm)$coefficients[5,4]
p_Hb[i] <- summary(my_lm)$coefficients[6,4]
p_HDL[i] <- summary(my_lm)$coefficients[7,4]
p_Chol[i] <- summary(my_lm)$coefficients[8,4]
p_lipid[i] <- summary(my_lm)$coefficients[9,4]
adj_r_sq[i] <- summary(my_lm)$adj.r.sq
}
final_data <- cbind(lipid, beta_y_int, beta_AfAm, beta_Age,
beta_WC, beta_CRP, beta_Hb, beta_HDL, beta_Chol, beta_lipid,
p_y_int, p_AfAm, p_Age, p_WC, p_CRP, p_Hb, p_HDL, p_Chol, p_lipid,
adj_r_sq)
final_data <- as_tibble(final_data)
final_data <- final_data |> drop_na()
final_data[,2:ncol(final_data)] <- sapply(final_data[,2:ncol(final_data)],
as.numeric)
summary(lm(y_var ~ race_var + Age_var + WC_var + CRP_var + Hb_var + HDL_var + Chol_var))
reg_plot <- final_data
reg_plot$p_lipid_fdr<- p.adjust(reg_plot$p_lipid, method = 'fdr')
reg_plot$sig_lipid <- ifelse(reg_plot$p_lipid_fdr < 0.15,
"YES", "NO")
reg_plot$useful <- ifelse(reg_plot$adj_r_sq > 0.1816 & reg_plot$p_lipid_fdr < 0.15,
"YES", "NO")
reg_plot$delabel <- NA
reg_plot$delabel <- ifelse(reg_plot$useful == "YES",
reg_plot$lipid, NA)
toMatch <- c("20:4", "18:2", "22:4")
reg_plot$delabel <- ifelse(grepl(paste(toMatch,collapse="|"),
reg_plot$delabel),reg_plot$delabel,NA)
reg_plot$p_lipid <- (-log10(reg_plot$p_lipid))
p0 <- ggplot(data=reg_plot, aes(x=beta_lipid, y=p_lipid,
col=useful)) +
geom_point(alpha = 0.5) +
scale_x_continuous(limits = c(-2.5, 3.0)) +
scale_y_continuous(limits = c(0, 5.5), expand = c(0.01,0)) +
scale_color_manual(values=c("#BC3C29FF", "grey70"),
name = "Lipid term (FDR)",
breaks = c("YES", "NO"),
labels = c("q<0.15", "q>0.15")) +
geom_text_repel(aes(label=delabel), color = "black",
segment.color = "#000000B2",
min.segment.length = 0, segment.size = 0.2,
size = 4, fontface = "bold", family = "Arial",
box.padding = 0.5, max.overlaps = Inf) +
ggtitle("MIDUS Regressions - MLR") +
ylab(expression(bold("-log"["10"]*"(p-value)"))) +
xlab(expression(bold("Beta-coefficient"))) +
theme_bw(base_size = 16, base_family = "Arial") +
theme(legend.position = "right",
text = element_text(face="bold"),
axis.text = element_text(colour = "black"))
p0
# Run the packages twice to ensure installation and loading of packages
# may need to download 'xrun' package separately before loading this
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(rstatix)){install.packages("rstatix")}
if(!require(ggsci)){install.packages("ggsci")}
if(!require(scales)){install.packages("scales")}
if(!require(Cairo)){install.packages("Cairo")}
if(!require(RColorBrewer)){install.packages("RColorBrewer")}
if(!require(ggrepel)){install.packages("ggrepel")}
if(!require(corrplot)){install.packages("corrplot")}
if(!require(VennDiagram)){install.packages("VennDiagram")}
if(!require(futile.logger)){install.packages("futile.logger")}
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
if(!require(glmnet)){install.packages("glmnet")}
if(!require(tidymodels)){install.packages("tidymodels")}
if(!require(broom.mixed)){install.packages("broom.mixed")}
if(!require(vip)){install.packages("vip")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(networkD3)){install.packages("networkD3")}
if(!require(htmlwidgets)){install.packages("htmlwidgets")}
if(!require(webshot)){install.packages("webshot")}
if(!require(doParallel)){install.packages("doParallel")}
# Set default theme for plots
theme_set(theme_bw(base_size = 16, base_family = "Arial"))
# Set default color schemes
mypal <- pal_nejm(palette = c("default"))(8)
show_col(mypal)
midus_pal <- c("#0072B5FF", "#BC3C29FF")
palette_mc <- c("#7876B1CC", "#20854EFF")
midus_sc <- palette_mc
cortheme <- colorRampPalette(rev(c("#440154FF", "#481568FF", "#482677FF", "#453781FF",
"#3F4788FF", "#39558CFF", "#32648EFF", "#2D718EFF",
"#287D8EFF", "#238A8DFF", "#1F968BFF","#20A386FF",
"#29AF7FFF", "#3CBC75FF", "#56C667FF", "#74D055FF",
"#94D840FF", "#B8DE29FF", "#DCE318FF", "#FDE725FF"
)))(75)
pie_Pal1 <- brewer.pal(9, "Set1")
# Load data
my_data_indiv <- read_csv("fake_data/MIDUS_FAKE_indiv.csv") # fake dataset for individual untargeted lipid species data
my_data_sum <- read_csv("fake_data/MIDUS_FAKE_sums.csv")    # fake dataset for untargeted lipid class sums data
my_data_oxylipid <- read_csv("fake_data/MIDUS_FAKE_oxylipid.csv") # fake dataset for targeted oxylipid analysis
# Code in factors with desired level hierarchy - important for plotting
# reorder the variable Diag_HBP so the hierarchy is Normal then High
my_data_indiv$Diag_HBP <- factor(my_data_indiv$Diag_HBP,
levels = c("Normal", "High"))
# reorder the variable Race as above
my_data_indiv$Race <- factor(my_data_indiv$Race,
levels = c("Caucasian", "African-American"))
# Rename to the White and Black to match survey questions asked
levels(my_data_indiv$Race) <- c("White", "Black")
# Repeat the factor organization for oxylipid dataset
my_data_oxylipid$Diag_HBP <- factor(my_data_oxylipid$Diag_HBP,
levels = c("Normal", "High"))
my_data_oxylipid$Race <- factor(my_data_oxylipid$Race,
levels = c("Caucasian", "African-American"))
levels(my_data_oxylipid$Race) <- c("White", "Black")
# Use individual lipid species factor ordering for sum lipid data frame
my_data_sum$Diag_HBP <- my_data_indiv$Diag_HBP
my_data_sum$Race <- my_data_indiv$Race
MLR_lipids <- read_csv(output/"MLR_Venn.csv")
MLR_lipids <- read_csv("output/MLR_Venn.csv")
MLR_lipids <- read_csv("fake_data/MLR_Venn.csv")
MIDUS_lipids <- as.list(MLR_lipids$MIDUS_lipids)
MIDUS_lipids <- as.vector(MLR_lipids$MIDUS_lipids)
SHOW_lipids <- as.vector(MLR_lipids$SHOW_lipids)
myCol_fill <- c("#E18727B2", "#BC3C29B2")
myCol_text <- c("#E18727FF", "#BC3C29FF")
v <-  venn.diagram(x = list(SHOW_lipids, MIDUS_lipids),
category.names = c("SHOW", "MIDUS"),   # title of each category in Venn diagram
main = "Predictive 18:2, 20:4 and 22:4 containing lipids", # plot title
compression = "lzw",        # image compression
fontfamily = "Arial",       # text font
col = myCol_fill, fill = alpha(myCol_fill, 0.7), # fill colors
cat.col = myCol_text,           # text colors
cat.fontface = "bold" , cat.cex = 1, # font face and size
cat.fontfamily = "Arial",
filename = NULL, resolution = 600,   # image resolution
output = T)
MIDUS_lipids <- na.omit(as.vector(MLR_lipids$MIDUS_lipids))
SHOW_lipids <- na.omit(as.vector(MLR_lipids$SHOW_lipids))
# Color scheme for Venn diagram
myCol_fill <- c("#E18727B2", "#BC3C29B2")
myCol_text <- c("#E18727FF", "#BC3C29FF")
# Make venn diagram
v <-  venn.diagram(x = list(SHOW_lipids, MIDUS_lipids),
category.names = c("SHOW", "MIDUS"),   # title of each category in Venn diagram
main = "Predictive 18:2, 20:4 and 22:4 containing lipids", # plot title
compression = "lzw",        # image compression
fontfamily = "Arial",       # text font
col = myCol_fill, fill = alpha(myCol_fill, 0.7), # fill colors
cat.col = myCol_text,           # text colors
cat.fontface = "bold" , cat.cex = 1, # font face and size
cat.fontfamily = "Arial",
filename = NULL, resolution = 600,   # image resolution
output = T)
grid.draw(v)
CairoPDF(file = "output/MIDUS_Venn_MLR.pdf")
grid.draw(v)
dev.off()
# Run the packages twice to ensure installation and loading of packages
# may need to download 'xrun' package separately before loading this
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(ggpubr)){install.packages("ggpubr")}
if(!require(rstatix)){install.packages("rstatix")}
if(!require(ggsci)){install.packages("ggsci")}
if(!require(scales)){install.packages("scales")}
if(!require(Cairo)){install.packages("Cairo")}
if(!require(RColorBrewer)){install.packages("RColorBrewer")}
if(!require(ggrepel)){install.packages("ggrepel")}
if(!require(corrplot)){install.packages("corrplot")}
if(!require(VennDiagram)){install.packages("VennDiagram")}
if(!require(futile.logger)){install.packages("futile.logger")}
futile.logger::flog.threshold(futile.logger::ERROR, name = "VennDiagramLogger")
if(!require(glmnet)){install.packages("glmnet")}
if(!require(tidymodels)){install.packages("tidymodels")}
if(!require(broom.mixed)){install.packages("broom.mixed")}
if(!require(vip)){install.packages("vip")}
if(!require(DescTools)){install.packages("DescTools")}
if(!require(networkD3)){install.packages("networkD3")}
if(!require(htmlwidgets)){install.packages("htmlwidgets")}
if(!require(webshot)){install.packages("webshot")}
if(!require(doParallel)){install.packages("doParallel")}
# Set default theme for plots
theme_set(theme_bw(base_size = 16, base_family = "Arial"))
# Set default color schemes
mypal <- pal_nejm(palette = c("default"))(8)
show_col(mypal)
midus_pal <- c("#0072B5FF", "#BC3C29FF")
palette_mc <- c("#7876B1CC", "#20854EFF")
midus_sc <- palette_mc
cortheme <- colorRampPalette(rev(c("#440154FF", "#481568FF", "#482677FF", "#453781FF",
"#3F4788FF", "#39558CFF", "#32648EFF", "#2D718EFF",
"#287D8EFF", "#238A8DFF", "#1F968BFF","#20A386FF",
"#29AF7FFF", "#3CBC75FF", "#56C667FF", "#74D055FF",
"#94D840FF", "#B8DE29FF", "#DCE318FF", "#FDE725FF"
)))(75)
pie_Pal1 <- brewer.pal(9, "Set1")
# Load data
my_data_indiv <- read_csv("fake_data/MIDUS_FAKE_indiv.csv") # fake dataset for individual untargeted lipid species data
my_data_sum <- read_csv("fake_data/MIDUS_FAKE_sums.csv")    # fake dataset for untargeted lipid class sums data
my_data_oxylipid <- read_csv("fake_data/MIDUS_FAKE_oxylipid.csv") # fake dataset for targeted oxylipid analysis
# Code in factors with desired level hierarchy - important for plotting
# reorder the variable Diag_HBP so the hierarchy is Normal then High
my_data_indiv$Diag_HBP <- factor(my_data_indiv$Diag_HBP,
levels = c("Normal", "High"))
# reorder the variable Race as above
my_data_indiv$Race <- factor(my_data_indiv$Race,
levels = c("Caucasian", "African-American"))
# Rename to the White and Black to match survey questions asked
levels(my_data_indiv$Race) <- c("White", "Black")
# Repeat the factor organization for oxylipid dataset
my_data_oxylipid$Diag_HBP <- factor(my_data_oxylipid$Diag_HBP,
levels = c("Normal", "High"))
my_data_oxylipid$Race <- factor(my_data_oxylipid$Race,
levels = c("Caucasian", "African-American"))
levels(my_data_oxylipid$Race) <- c("White", "Black")
# Use individual lipid species factor ordering for sum lipid data frame
my_data_sum$Diag_HBP <- my_data_indiv$Diag_HBP
my_data_sum$Race <- my_data_indiv$Race
View(my_data_indiv)
View(my_data_indiv)
?left_join
View(my_data_sum)
left_join(Z,
my_data_sum |>
select(`TAG 42:0-16:0`:`TAG 60:11-22:6`),
by = "Simcox_ID")
Z <- my_data_indiv |>
select(Simcox_ID, `Systolic BP`, race_var, Age, `WC (cm)`, HbA1c,
`Total Chol (mg/dL)`, `HDL (mg/dL)`, `CRP (ug/mL)`,
`CE 12:0`:`SM 26:1`)
Z <- my_data_indiv |>
select(Simcox_ID, `Systolic BP`, Race, Age, `WC (cm)`, HbA1c,
`Total Chol (mg/dL)`, `HDL (mg/dL)`, `CRP (ug/mL)`,
`CE 12:0`:`SM 26:1`)
Z <- Z[is.na(Z$`WC (cm)`) == F,]
Z <- Z[is.na(Z$HbA1c) == F,]
left_join(Z,
my_data_sum |>
select(`TAG 42:0-16:0`:`TAG 60:11-22:6`),
by = "Simcox_ID")
left_join(Z,
my_data_sum |>
select(Simcox_ID,
`TAG 42:0-16:0`:`TAG 60:11-22:6`),
by = "Simcox_ID")
Z <- Z |> na.omit(HbA1c, `WC (cm)`)
Z <- Z |>
na.omit(HbA1c, `WC (cm)`)
View(Z)
Z[1,5] <- NA
Z <- Z |>
na.omit(HbA1c, `WC (cm)`)
View(Z)
View(Z)
Z <- left_join(Z,
my_data_sum |>
select(Simcox_ID,
`TAG 42:0-16:0`:`TAG 60:11-22:6`
),
by = "Simcox_ID") |>
mutate(across(Z|>
select(Age:`TAG 60:11-22:6`
),
log2)
)
Z <- Z |>
mutate(across(Age:`TAG 60:11-22:6`, log2)
) |>
select(-Simcox_ID)
View(Z)
Z <- left_join(Z,
my_data_sum |>
select(Simcox_ID,
`TAG 42:0-16:0`:`TAG 60:11-22:6`
),
by = "Simcox_ID")
Z <- Z |>
mutate(across(Age:`TAG 60:11-22:6`, log2)
) |>
select(-Simcox_ID)
View(Z)
Z <- Z |> replace_na(0)
Z <- Z |>
select(`CE 12:0`:`TAG 60:11-22:6`) |>
replace_na(0)
?replace_na
Z |>
select(`CE 12:0`:`TAG 60:11-22:6`) |>
replace_na(0)
Z |>
mutate(across(`CE 12:0`:`TAG 60:11-22:6`, replace_na(0)))
Z |>
mutate(across(`CE 12:0`:`TAG 60:11-22:6`, replace_na))
Z[1,12] <- NA
Z <- Z |>
mutate(across(`CE 12:0`:`TAG 60:11-22:6`, replace_na))
View(Z)
Z <- Z |>
mutate(replace_na(across(`CE 12:0`:`TAG 60:11-22:6`), 0)
)
Z <- Z |> replace(is.na(.), 0)
Z <- Z |> replace(is.na(Z), 0)
View(Z)
Z <- Z |>
select(`CE 12:0`:`TAG 60:11-22:6`) |>
replace(is.na(Z), 0)
Z[1,12] <- NA
Z <- replace(is.na(Z |>
select(`CE 12:0`:`TAG 60:11-22:6`)
), 0)
# Subset variables
Z <- my_data_indiv |>
select(Simcox_ID, `Systolic BP`, Race, Age, `WC (cm)`, HbA1c,
`Total Chol (mg/dL)`, `HDL (mg/dL)`, `CRP (ug/mL)`,
`CE 12:0`:`SM 26:1`)  # Exclude TAG variables as they will be taken from sum lipid data
# Drop participants with key data missing
Z <- Z |>
na.omit(HbA1c, `WC (cm)`)
# Add sum lipid TAG variables as they have acyl chain information
Z <- left_join(Z,
my_data_sum |>
select(Simcox_ID,
`TAG 42:0-16:0`:`TAG 60:11-22:6`
),
by = "Simcox_ID")
# log2 transform all continuous independent variables
Z <- Z |>
mutate(across(Age:`TAG 60:11-22:6`, log2)
) |>
select(-Simcox_ID)
# Replace NA values with 0 (should only be replacing MS-based lipid variables)
Z <- Z |>
replace(is.na(Z), 0)
# Create a grouping variable for Race AND BP status
Z$ID <- interaction(Z$Race,
Z$`Systolic BP`>120) # stratification variable for data split
# Change Race to a dummy variable where 0 = White, 1 = Black
Z$Race <- ifelse(Z$Race == "White", 0, 1)
View(Z)
