theme(legend.position = "right",                        # change legend, font size and font
text = element_text(size = 16,
family = "Arial"),
axis.line = element_line(colour = "black")
)
p0
Z = lipid_data
# Below, the hsCRP plot is reproduced
p0 <- Z |>
ggplot(aes(x=Race,                    # Race is the x-axis variable
y=log10(`hsCRP (ng/mL)`),  # hsCRP is log10 transformed
group = Diag_HBP,          # BP groups within race are plotted
fill = Diag_HBP)) +
geom_violin(aes(group = interaction(Diag_HBP, Race)), # violin plot added
scale = "area") +
scale_fill_manual("Blood Pressure",   # Legend title and group colors
values = c("#709AE1FF", "#FED439FF")
) +
geom_boxplot(aes(group = interaction(Diag_HBP, Race)),  # overlay boxplot
width = 0.3, alpha = 0.8,                  # size and color shade
outlier.shape = NA,                        # not plotting outliers
color = "black",                           # boxplot outline
fill = "white",                            # boxplot fill
position = position_dodge(width = 0.9)     # plot offset by x-axis
) +
geom_point(shape = 21,                 # Add individual points
size = 2,
alpha = 0.2,
position=position_jitterdodge(dodge.width = 0.9) # Add jitter to points
) +
theme(legend.position = "none",                 # legend plot for points
plot.title = element_text(size = 11)
) +
xlab("Race") +                                  # x-axis title
ylab(bquote('log'[10]*'(hsCRP)')  # y-axis title
) +
theme_bw(base_size = 16, base_family = "Arial") +  # simple theme
theme(legend.position = 'right') +                 # additional theme position
ggtitle("SHOW hsCRP (ng/mL)") +                    # plot title
stat_compare_means(label = "p.format",             # non-parametric test
label.x = 1.5,
label.y = 1.05*(log10(max(Z$`hsCRP (ng/mL)`,
na.rm = T)
)
),
method = "wilcox.test")
# View plot
p0
all_id <- read_csv("data/method_plot.csv")
p0 <- all_id |> ggplot(aes(x = `RT (avg)`,    # plot RT on x-axis
y = `Mass (avg)`,  # plot Mass on y-axis (m/z since charge always 1 for lipids)
color = `Class`)   # color points by lipid class
) +
geom_point() +                              # plot all lipids as points
scale_color_manual(values = mypal2[c(1, 3:6)]) +
ylab("mass-to-charge (mz)") +
xlab("Retention Time (min)") +
ggtitle("LC-MS analysis of SHOW samples",
subtitle = "Lipids identified in plasma."
) +
theme_bw(base_size = 16) +
theme(text = element_text(face = "bold",
family = "Arial")
)
p0
Z <- all_id |>
count(Class, Abbreviation,
sort = TRUE)            # sort from highest to lowest by number of lipids of each group
names(Z)[2] <- "Subclass"       # Rename 'Abbreviation' columns
p0 <- Z |> PieDonut(aes(Class, Subclass, count=n),    # major class inside, subclass outside, size by count
title = "Lipid species distribution",
ratioByGroup = F,
explodePie = T,                  # Add white spacing between pie
explodeDonut = T,                # Add white spacing between donut
labelposition = 0)
p0
Z |> PieDonut(aes(Class, Subclass, count=n),    # major class inside, subclass outside, size by count
title = "Lipid species distribution",
ratioByGroup = F,
explodePie = T,                  # Add white spacing between pie
explodeDonut = T,                # Add white spacing between donut
labelposition = 0)
Z <- lipid_data
Z[is.na(Z)] <- 0
# Sum total lipids by sub class based on what's in the data
Z$`Total CE` <- rowSums(Z[,grep('CE ', colnames(Z))])
Z$`Total Cer` <- rowSums(Z[,grep('Cer', colnames(Z))])
Z$`Total DG` <- rowSums(Z[,grep('\\bDG\\b', colnames(Z))])
Z$`Total EtherPC` <- rowSums(Z[,grep('EtherPC', colnames(Z))])
Z$`Total EtherPE` <- rowSums(Z[,grep('EtherPE', colnames(Z))])
Z$`Total FA` <- rowSums(Z[,grep('\\bFA\\b', colnames(Z))])
Z$`Total FFA` <- rowSums(Z[,grep('FA', colnames(Z))])
Z$`Total LPC` <- rowSums(Z[,grep('LPC', colnames(Z))])
Z$`Total LPE` <- rowSums(Z[,grep('LPE', colnames(Z))])
Z$`Total PC` <- rowSums(Z[,grep('\\bPC\\b', colnames(Z))])
Z$`Total PE` <- rowSums(Z[,grep('\\bPE\\b', colnames(Z))])
Z$`Total PI` <- rowSums(Z[,grep('\\bPI\\b', colnames(Z))])
Z$`Total SM` <- rowSums(Z[,grep('\\SM\\b', colnames(Z))])
Z$`Total TG` <- rowSums(Z[,grep('TG', colnames(Z))])
# Lipids used to calculate total phospholipids
my_PPL <- c("BMP", "CL", "EtherPC", "EtherPE", "LPA", "LPC", "LPE", "LPG",
"LPI", "LPS", "PA", "PC", "PE", "PG", "PI", "PMeOH", "PS")
Z$`Total PPL` <- rowSums(Z[,grep(paste(my_PPL, collapse = "|"),
colnames(Z))])
# Lipids used to calculate total (non-PPL) glycerolipids
my_GL <- c("DG","TG")
Z$`Total GL` <- rowSums(Z[,grep(paste(my_GL, collapse = "|"),
colnames(Z))])
# Lipids used to calculate total sphingolipids
my_SPL <- c("Cer", "GM3", "SM")
Z$`Total SPL` <- rowSums(Z[,grep(paste(my_SPL, collapse = "|"),
colnames(Z))])
# Total sterol lipids (i.e. total cholesteryl esters)
Z$`Total ST` <- Z$`Total CE`
Y <- Z |> select(Simcox_ID:`TNF-a (pg/mL)`,
`Total CE`:`Total ST`)
# log10 transform lipid columns
Y <- Y |>
mutate(across(`Total CE`:`Total ST`, log10))
mdat1 <- Y |>
filter(Race == "Black") |>                # Choose either Black or White
select(Diag_HBP, `Total PPL`:`Total ST`)   # For major class, Total PPL:Total ST
# For subclass, Total CE:Total TG
# Make data long-form; retain HBP variable and pivot all lipid variables
mdat2 <- mdat1 |> pivot_longer(!Diag_HBP,
names_to = "Lipid",
values_to = "value")
names(mdat2)[1] <- "Condition"             # Rename 'Diag_HBP'
# Make variables factors and change levels to desired order for plotting
mdat2$Condition <- factor(mdat2$Condition,
levels = c("Normal", "High"))
mdat2$Lipid <- factor(mdat2$Lipid)
mdat2 <- na.omit(mdat2)
p0 <- ggbarplot(mdat2, x = "Lipid", y = "value",       # Create barplot
add = c("mean_se", "dotplot"),             # elements to add
color = "Condition",                       # outline colors; used for dotplot grouping
fill = "Condition",                        # fill colors; used for barplot grouping
add.params = list(width = 0.35,            # parameters for dot formatting
binwidth = 0.005*max(mdat2$value,     # binwidth refers to size of dots
na.rm = T)
),
alpha = 0.75,                              # opacity of colors
position = position_dodge(0.8),            # spacing of bars w.r.t. each other
size = 0.15                                # width of error lines
)                              # note: width can be used to specify individual bar size
p1 <- ggpar(p0,                        # wrapper for ggplot for aesthetics
palette = show_pal,        # palette
legend = "right",          # legend position
legend.title = "Blood Pressure") +              # legend title
scale_y_continuous(limits = c(0.0, 1.25*max(mdat2$value)  # y-axis limits
),
expand=c(0,0)                          # remove extra spacing on edges of plot
) +
theme_bw(base_size = 16,                                  # various theme changes
base_family = "Arial") +
theme(legend.position = "right",
text = element_text(face="bold",
size = 14,
family = "Arial",
colour = "black"),
axis.text.x = element_text(angle = 45,              # change x-axis text orientation
hjust=1)                 # vertical adjustment for text
)
# Perform t-test for pairwise comparisons
stat.test <- mdat2 |>
group_by(Lipid) |>                  # grouping variable (x-axis)
na.omit() |>
t_test(value ~ Condition) |>        # perform t-test comparing lipid values by conditions (BP status)
adjust_pvalue(method = "none") |>   # prevent automatic multiple comparison calculation
add_significance("p")               # column for final p-value to be plotted
stat.test$p.adj.signif <- stat.test$p.signif    # Additional fail-safe to not use adjusted p-values
stat.test <- stat.test |>
na.omit() |>
add_xy_position(fun = "max",        # add coordinates to plot p-values based on highest point
"Lipid",            # x-axis variable
dodge = 0.8)        # spacing of p-values; should match 'position_dodge' above
p2 <- p1 + stat_pvalue_manual(        # add p-values to plots
stat.test,
label = "p.signif",                 # text to plot (p-value or asterisks)
tip.length = 0.02,
hide.ns = F) +                      # display non-significant (P<0.05) comparisons?
ylab(expression(bold("log"["10"]*"(nM lipid)"))) +  # y-axis title
xlab(expression(bold("Lipid Class"))) +             # x-axis title
ggtitle(expression(bold("Major Class Lipids - Black")))    # plot title
p2
Z <- lipid_data |> select(Simcox_ID, Race, Diag_HBP,      # subset these columns by name
grep(paste(my_PPL,               # subset all PPL lipids
collapse = "|"),      # can replace with 'my_SPL' or 'my_GL'
names(lipid_data)
)
)
Z <- Z |> replace(is.na(Z), 0)  # Replace NA values with 0
Z <- Z |> rename(HBP = Diag_HBP)
# Make data long-form
mdat1 <- Z |> pivot_longer(!Simcox_ID:HBP,
names_to = "Lipids",
values_to = "values")
# Use text editing to tabulate FA intensity across lipid species
mdat1$Lipids <- gsub(".*\\ ",            # Removes characters from start '.*'
"", mdat1$Lipids)   # until the first space '\\ ' and replaces with nothing ('""')
# Remove the sn-2 position info on lyso-PPL
mdat1$Lipids <- gsub("/0:0", "", mdat1$Lipids)
mdat1$Lipids <- gsub("0:0/", "", mdat1$Lipids)
mdat2 <- str_split_fixed(mdat1$Lipids, "_", 2) # separate text at the '_' between FAs (change to 3 if GLs)
mdat3 <- cbind(mdat1, mdat2)
# Split individual FAs into separate columns for further editing
# Create a third data frame for GLs
mdat3_FA1 <- mdat3 |> select(Simcox_ID:values, `1`)
mdat3_FA2 <- mdat3 |> select(Simcox_ID:values, `2`)
names(mdat3_FA1)[6] <- "FA"
names(mdat3_FA2)[6] <- "FA"
# Replace ether lipid 'e' and duplicate annotation '_2' in FA names
mdat3_FA1$FA <- gsub("e", "", mdat3_FA1$FA)
mdat3_FA1$FA <- gsub("_2", "", mdat3_FA1$FA)
mdat3_FA2$FA <- gsub("_2", "", mdat3_FA2$FA)
# verify no other FA names need to be edited
table(mdat3_FA1$FA)
table(mdat3_FA2$FA)    # the '2' FAs refers to sum composition duplicates that can be ignored
# This is the dataset with names cleaned up
mdat4 <- rbind(mdat3_FA1, mdat3_FA2)
# Sum up acyl chain values
mdat5 <- mdat4 |>
group_by(Simcox_ID, Race, HBP, FA) |>  # grouping variables to retain
summarise(value = sum(values)) |>           # function to apply (summation of value column)
ungroup()
# Filter by Race
mdat6 <- mdat5 |> filter(Race == "Black")
# List acyl chain of interest
table(mdat6$FA)  # acyl chain options
Chains <- c("16:0", "16:1", "18:0",
"18:1", "18:2", "20:3",
"20:4", "22:4", "22:6")
mdat6 <- mdat6 |> filter(FA %in% Chains)  # Retain acyl chains of interest
mdat6$value <- log10(mdat6$value)         # transform data
# See previous section for details on barplot code
p0 <- ggbarplot(mdat6, x = "FA" , y = "value",
fill = "HBP", color = "HBP",
add = c("mean_se", "dotplot"),
add.params = list(width = 0.35,
binwidth = 0.005*max(mdat6$value, na.rm = T)),
alpha = 0.75, position = position_dodge(0.8), size = 0.5
)
p1 <- ggpar(p0, palette = show_pal, legend = "right",
legend.title = "Blood Pressure") +
scale_y_continuous(limits = c(0.0, 1.25*max(mdat6$value)),
expand=c(0,0)
) +
theme_bw(base_size = 16, base_family = "Arial") +
theme(legend.position = "right",
text = element_text(face="bold",
size = 14,
family = "Arial",
colour = "black"),
axis.text.x = element_text(angle = 45, hjust=1)
)
stat.test <- mdat6 |>
na.omit() |>
group_by(FA) |>
t_test(value ~ HBP) |>
adjust_pvalue(method = "none") |>
add_significance("p")
stat.test$p.adj.signif <- stat.test$p.signif
stat.test <- stat.test |>
add_xy_position(fun = "max", x = "FA", dodge = 0.8)
p2 <- p1 + stat_pvalue_manual(
stat.test, label = "p",
tip.length = 0.02, hide.ns = F
) +
ylab(expression(bold("log"["10"]*"(nM lipid)"))) +
xlab(expression(bold("Acyl Chain"))) +
ggtitle(expression(bold("PPL Acyl Chain Signal - Black")))
p2
Z <- lipid_data |>
select(Simcox_ID, Race, Diag_HBP,
`CE 16:0`:`TG 58:9`)
# Make sure all 0 values are NA
Z[Z==0] <- NA
# log2 transform lipid data
Z <- Z |>
mutate(across(c(`CE 16:0`:`TG 58:9`), log2))
# Make data long-form for target population (Black or White)
Y <- Z |> filter(Race == "White") |>             # Race filter must be applied here or FDR will be affected
pivot_longer(cols = -c(Simcox_ID:Diag_HBP),
names_to = "Lipid",
values_to = "value")
# Generate data to make volcano plot
# This code performs the calculations within the group specified
volcano <- Y |> drop_na() |>
group_by(Lipid, Race) |>      # retain Lipid names and Race info
summarise(log2_FC = mean(value[Diag_HBP == "High"]) # Calculate fold change between high & normal BP
- mean(value[Diag_HBP == "Normal"])) |>
ungroup()
# Calculate p-values for high versus normal BP for each lipid, within each group
stat.test <- Y |>
group_by(Lipid, Race) |>          # Grouping variables as above
t_test(value ~ Diag_HBP) |>       # signifcance test (can also do wilcox_test)
adjust_pvalue(method = "fdr") |>  # multiple comparison adjustment (adjusted values in new column)
mutate(log10_p = -log10(p)) |>    # transform p-values for plotting
ungroup()
# Add stats info to fold change
volcano <- left_join(volcano, stat.test,
by = c("Lipid","Race"))
# Create binary [factor] variable for lipid change based on FDR p-value and direction of change
volcano$signif <- ifelse(volcano$p.adj < 0.05 & volcano$log2_FC > 0.0,
"Increased", "q>0.05")
volcano$signif <- ifelse(volcano$p.adj < 0.05 & volcano$log2_FC < 0.0,
"Decreased", volcano$signif)
volcano$signif <- factor(volcano$signif,
levels = c("q>0.05", "Increased", "Decreased"))
# Create scatterplot with fold change on x-axis, p-value on y-axis, and FDR adjusted direction by color
# See previous sections for explanation on ggplot options
p0 <- volcano |> ggplot(aes(x=log2_FC, y=log10_p, col=signif)) +
geom_point() +
scale_x_continuous(limits = c(-0.70, max(volcano$log2_FC)*1.1)) +
scale_y_continuous(limits = c(0, 7.50), expand = c(0.01,0)) +
theme_minimal() +
scale_color_manual(values=c("grey70", "#E18727FF", "#20854EFF"),
name = "Change in Circulation",                   # legend title
breaks = c("q>0.05", "Increased", "Decreased"),   # factor levels in volcano
labels = c("q>0.05", "Increased", "Decreased")) + # desired name in legend
geom_hline(yintercept = 1.301,                                             # dashed line for p<0.05
linetype = "dashed",
linewidth = 0.5) +
geom_label(aes(x = 1.5, y = 1.301,           # text label for line signifying p-value
label = "P<0.05",
vjust = -0.5),
colour = "black", label.size = NA) +
ggtitle("SHOW - White lipid changes") +
ylab(expression(bold("-log"["10"]*"(p-value)"))) +
xlab(expression(bold("Fold change [log"["2"]*"(HBP) - log"["2"]*"(Normal)]"))) +
theme_bw(base_size = 16, base_family = "Arial") +
theme(legend.position = "right",
text = element_text(face="bold"),
axis.text = element_text(colour = "black"))
p0
# Subset systolic (dependend variable), common risk factors and all lipid variables
Z <- lipid_data |>
select(`Systolic BP`, Race, Age, `WC (cm)`, HbA1c,
HDL, `Total cholesterol`, `hsCRP (ng/mL)`,
`CE 16:0`:`TG 58:9`)
# specify y-variable to be predicted
y_var <- Z$`Systolic BP`
# Race is a dummy variable where 0 = White, 1 = Black
race_var <- Z$Race
# log2 transform and scale the rest of the covariates
Age_var <- scale(log2(Z$Age), center = TRUE, scale = TRUE)
WC_var <- scale(log2(Z$`WC (cm)`), center = TRUE, scale = TRUE)
CRP_var <- scale(log2(Z$`hsCRP (ng/mL)`), center = TRUE, scale = TRUE)
Hb_var <- scale(log2(Z$HbA1c), center = TRUE, scale = TRUE)
HDL_var <- scale(log2(Z$HDL), center = TRUE, scale = TRUE)
Chol_var <- scale(log2(Z$`Total cholesterol`), center = TRUE, scale = TRUE)
# Results from the 'base' regression predicting systolic from common risk factors only
summary(lm(y_var ~ race_var + Age_var + WC_var + CRP_var + Hb_var + HDL_var + Chol_var))
# Adjusted R-squared = 0.09542, p-value = 0.01237; intercept and age are the only variables with p<0.05
# Create variables for a for loop to test the association of each variable individually
lipid <- as.character()     # variable for each lipid name
# Variables to store beta coefficient from each term
beta_y_int <- as.numeric()
beta_AfAm <- as.numeric()
beta_Age <- as.numeric()
beta_WC <- as.numeric()
beta_CRP <- as.numeric()
beta_Hb <- as.numeric()
beta_HDL <- as.numeric()
beta_Chol <- as.numeric()
beta_lipid <- as.numeric()
# Variables to store p-value of each term in regression
p_y_int <- as.numeric()
p_AfAm <- as.numeric()
p_Age <- as.numeric()
p_WC <- as.numeric()
p_CRP <- as.numeric()
p_Hb <- as.numeric()
p_HDL <- as.numeric()
p_Chol <- as.numeric()
p_lipid <- as.numeric()
# Variable to store adjusted R-squared value of each regression
adj_r_sq <- as.numeric()
# iterate for loop starting at the first lipid variable (column 6) and ending on the last one ('ncol(Z)')
for (i in 9:ncol(Z)) {
# For each iteration, create independent lipid variable that is log2 and scaled
x_var <- scale(log2(Z[,i]), center = TRUE, scale = TRUE)
# Run regression
my_lm <- lm(y_var ~ race_var + Age_var + WC_var + CRP_var + Hb_var + HDL_var + Chol_var + x_var)
# Store name of lipid tested
lipid[i] <- names(Z)[i]
# store beta-coefficients; always in the first column of 'summary'
# note: first number in bracket (row) should match position of term in regression above (intercept = 1)
beta_y_int[i] <- summary(my_lm)$coefficients[1,1]
beta_AfAm[i] <- summary(my_lm)$coefficients[2,1]
beta_Age[i] <- summary(my_lm)$coefficients[3,1]
beta_WC[i] <- summary(my_lm)$coefficients[4,1]
beta_CRP[i] <- summary(my_lm)$coefficients[5,1]
beta_Hb[i] <- summary(my_lm)$coefficients[6,1]
beta_HDL[i] <- summary(my_lm)$coefficients[7,1]
beta_Chol[i] <- summary(my_lm)$coefficients[8,1]
beta_lipid[i] <- summary(my_lm)$coefficients[9,1]
# store term p-values; always in the fourth column of 'summary'; same note as above
p_y_int[i] <- summary(my_lm)$coefficients[1,4]
p_AfAm[i] <- summary(my_lm)$coefficients[2,4]
p_Age[i] <- summary(my_lm)$coefficients[3,4]
p_WC[i] <- summary(my_lm)$coefficients[4,4]
p_CRP[i] <- summary(my_lm)$coefficients[5,4]
p_Hb[i] <- summary(my_lm)$coefficients[6,4]
p_HDL[i] <- summary(my_lm)$coefficients[7,4]
p_Chol[i] <- summary(my_lm)$coefficients[8,4]
p_lipid[i] <- summary(my_lm)$coefficients[9,4]
# store adjusted r-squared
adj_r_sq[i] <- summary(my_lm)$adj.r.sq
}
# Bind all regression variables into one matrix
final_data <- cbind(lipid, beta_y_int, beta_AfAm, beta_Age,
beta_WC, beta_CRP, beta_Hb, beta_HDL, beta_Chol, beta_lipid, p_y_int,
p_AfAm, p_Age, p_WC, p_CRP, p_Hb, p_HDL, p_Chol, p_lipid,
adj_r_sq)
# Change matrix to type tibble and ensure all variables except lipid name are numeric
final_data <- as_tibble(final_data)
final_data <- final_data |> drop_na()
final_data[,2:ncol(final_data)] <- sapply(final_data[,2:ncol(final_data)],
as.numeric)
reg_plot <- final_data
# adjust lipid term p-values for multiple testing
reg_plot$p_lipid_fdr <- p.adjust(reg_plot$p_lipid, method = 'fdr')
# Create binary term for significance (q<0.15 = Yes)
reg_plot$sig_lipid <- ifelse(reg_plot$p_lipid_fdr < 0.15, "YES", "NO")
# Create additional variable identifying if a regression adjusted r-squared > base and q<0.15
reg_plot$useful <- ifelse(reg_plot$adj_r_sq > 0.09542 & reg_plot$p_lipid_fdr < 0.15,
"YES", "NO")
# Create variable that will be used to plot lipid names that meet above criteria
reg_plot$delabel <- NA
reg_plot$delabel <- ifelse(reg_plot$useful == "YES",
reg_plot$lipid, NA)
# Retain lipid labels that correspond to target acyl chains only
toMatch <- c("20:4", "18:2", "22:4")  # specify target acyl chains (arachidonic acid related chains)
# Non-target acyl chain labels will not be labeled
reg_plot$delabel <- ifelse(grepl(paste(toMatch,collapse="|"),
reg_plot$delabel),reg_plot$delabel,NA)
# Transform lipid term p-value for plotting
reg_plot$p_lipid <- (-log10(reg_plot$p_lipid))
# Create scatterplot of lipid term beta-coefficients on x-axis and significance on y-axis
# All lipids where term q<0.15 and adjusted r-squared > base regression are shaded in orange
# All arachidonic acid lipids are labeled [if meeting above criteria]
# See previous sections for explanation of ggplot functions not defined here
p0 <- reg_plot |>
ggplot(aes(x=beta_lipid, y=p_lipid, col=useful)) +
geom_point(alpha = 0.5) +
scale_x_continuous(limits = c(-6.0, 6.5)) +
scale_y_continuous(limits = c(0, 5.0), expand = c(0.01,0)) +
scale_color_manual(values=c("#E18727FF", "grey70"),
name = "Lipid term (FDR)",
breaks = c("YES", "NO"),
labels = c("q<0.15", "q>0.15")) +
geom_text_repel(aes(label=delabel),                   # Label lpoints with arachidonic-related chain
color = "black",
segment.color = "#000000B2",
min.segment.length = 0, segment.size = 0.2,  # set segment size parameters
fontface = "bold", box.padding = 0.5,        # text parameters
size = 4.0, family = "Arial",                # maximum allowed label overlaps
max.overlaps = Inf
) +
ggtitle("SHOW Regressions - Individual Lipids") +
ylab(expression(bold("-log"["10"]*"(p-value)"))) +
xlab(expression(bold("Beta-coefficient"))) +
theme_bw(base_size = 16, base_family = "Arial") +
theme(legend.position = "right",
text = element_text(face="bold"),
axis.text = element_text(colour = "black")
)
# As a note, SM and HexCer are NOT ARA species; those tags can be removed later
p0
Z <- lipid_data |>
select(`Systolic BP`, Race, Age, HbA1c,
`Total cholesterol`, HDL, `hsCRP (ng/mL)`,
`FA 18:2`, `WC (cm)`, `PC 17:0_20:3`,
`PE 18:0_22:4`, `PE 18:0_22:4_2`,
`EtherPE 18:1e_22:4`, `SM d36:2`,
`PE 18:1_20:4`, `PE 16:0_18:2`,
`TG 16:0_18:1_18:2`, `SM d38:1`,
`PI 18:0_18:2`)
# Log2 transform + scale all variables except systolic BP and Race
Z[,3:ncol(Z)] <- scale(log2(Z[,3:ncol(Z)]),
center = T,
scale = T)
# Run regression
myModel <- lm(`Systolic BP`~., Z)
summary(myModel) # adjusted R2 = 0.163; p = 0.00648
# Use dependent variables to predict Systolic BP (formula set by the above model)
mypred <- predict(myModel, Z)
# Create dataframe with predicted values, actual values and Race corresponding to each observation
final <- data.frame(mypred, Z$`Systolic BP`,
Z$Race)
# Rename columns
colnames(final) <- c("Predicted", "Systolic", "Race")
# Create scatterplot with actual BP on x-axis and predicted BP on y-axis. Points colored by Race.
p0 <- final |>
ggscatter(x = "Systolic", y = "Predicted",
add = "reg.line",                 # add regression line
color = "Race",                   # create additional grouping variable to plot one line/group
palette = palette_sc
) +
stat_cor(aes(color = Race), method = "spearman",   # Specify correlation type to report
label.x = min(final$Systolic),
p.accuracy = 0.001, r.accuracy = 0.01,
na.rm = T) +
xlab("Actual") +
ylab("Predicted") +
ggtitle("SHOW Best Model - Systolic BP (mmHg)") +
theme_bw() +
theme(legend.position = "right",
text = element_text(size = 16, family = "Arial"),
axis.line = element_line(colour = "black"))
p0
